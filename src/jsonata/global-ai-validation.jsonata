( /*  update error_0004 bugs   11-08-2025 */

        $errorMap := {
            "MISSING_0007": {
                "en": "Invoice item commodity code is missing",
                "tr": "Fatura kalemi eşya kodu eksik"
            },
            "ERROR_0001": {
                "en": "Invoice total amount is not equal to the sum of invoice items. Total amount: {{1}}, Invoice items total amount: {{2}}",
                "tr": "Fatura toplam tutarı, fatura kalemlerinin toplamına eşit değil . Toplam tutar: {{1}}, Fatura kalemlerinin toplam tutarı: {{2}}"
            },
            "ERROR_0002": {
                "en": "Declaration total value is not equal to the sum of declaration items. Total value: {{1}}, Declaration items total value: {{2}}",
                "tr": "Beyanname toplam değeri, beyanname kalemlerinin toplamına eşit değil. Toplam değer: {{1}}, Beyanname kalemlerinin toplam değeri: {{2}}"
            },
            "INVALID_0038": {
                "en": "Invoice commodity code is not valid, invoice item index: {{1}}",
                "tr": "Fatura eşya kodu geçerli değil, fatura item index: {{1}}"
            },
            "INVALID_0039": {
                "en": "Declaration commodity code is not valid, declaration index: {{1}}",
                "tr": "Beyanname eşya kodu geçerli değil, declaration index: {{1}}"
            },
            "INVALID_0040": {
                "en": "Invoice currency is not valid",
                "tr": "Fatura para birimi geçerli değil"
            },
            "INVALID_0041": {
                "en": "Invoice item country of origin is not valid, invoice item index: {{1}}",
                "tr": "Fatura kalemi menşe ülkesi geçerli değil, fatura item index: {{1}}"
            },
            "INVALID_0042": {
                "en": "Declaration item country of origin is not valid, declaration index: {{1}}",
                "tr": "Beyanname kalemi menşe ülkesi geçerli değil, declaration index: {{1}}"
            },
            "ERROR_0003": {
                "en": "Declaration total line item is not equal to the number of declaration items. Total line item field value: {{1}}, Declaration items count: {{2}}",
                "tr": "Beyanname toplam satır kalemi, beyanname kalem sayısına eşit değil. Toplam satır kalem bilgisi: {{1}}, Beyanname kalem sayısı: {{2}}"
            },
            "ERROR_0004": {
                "en": "Declaration total gross weight is not equal to the sum of declaration items. Total gross weight field value: {{1}}, Declaration items total gross weight: {{2}}",
                "tr": "Beyanname toplam brüt ağırlığı, beyanname kalemlerinin toplamına eşit değil. Toplam brüt ağırlık bilgisi: {{1}}, Beyanname kalemlerinin toplam brüt ağırlığı: {{2}}"
            },
            "ERROR_0005": {
                "en": "Declaration total value is not equal to the invoice total value. Declaration total value: {{1}}, Invoice total value: {{2}}",
                "tr": "Beyanname toplam değeri, fatura toplam değerine eşit değil. Beyanname toplam değeri: {{1}}, Fatura toplam değeri: {{2}}"
            },
            "ERROR_0006": {
                "en": "Invoice total quantity is not equal to the sum of invoice items. Total quantity: {{1}}, Invoice items total quantity: {{2}}",
                "tr": "Fatura toplam miktarı, fatura kalemlerinin toplamına eşit değil. Toplam miktar: {{1}}, Fatura kalemlerinin toplam miktarı: {{2}}"
            }
        };

        $isDeclarationExist := $exists(tr_export_declaration) and $type(tr_export_declaration) = "object";
        $isInvoiceExist := $exists(invoice) and $type(invoice) = "array" and $count(invoice) > 0;
        $isCmrExist := $exists(cmr) and $type(cmr) = "object";
        $isAtrExist := $exists(atr) and $type(atr) = "object";
        $isCombineItemsExist := $exists(combine_items) and $type(combine_items) = "object";


        $atoi := function($data) {$type($data) = "string" ? $round($number($replace($data, ",", ".")), 2) : $data};

        $isExist := function($data, $errorMessage) {$data ? null : $errorMessage};

        $max := function($data, $value, $errorMessage) { $data ? $length($data) <= $value ? null : $errorMessage : null };
        $min := function($data, $value, $errorMessage) { $data ?  $length($data) >= $value ? null : $errorMessage : null };
        $eq := function($data, $value, $errorMessage) { $length($data) = $value ? null : $errorMessage };
        $neq := function($data, $value, $errorMessage) { $length($data) != $value ? null : $errorMessage };

        $between := function($data, $min, $max, $errorMessage) { $type($data) = "string" ? $length($data) > $min and $length($data) <= $max ? null : $errorMessage : null };
        $betweene := function($data, $min, $max, $errorMessage) { $type($data) = "string" ? $length($data) >= $min and $length($data) <= $max ? null : $errorMessage : null };
        $nbetween := function($data, $min, $max, $errorMessage) { $type($data) = "string" ? $length($data) < $min or $length($data) > $max ? null : $errorMessage : null };

        $in := function($data, $values, $errorMessage) { $data in $values ? null : $errorMessage };
        $nin := function($data, $values, $errorMessage) { $data in $values ? $errorMessage : null };
        $like := function($data, $pattern, $errorMessage) { $match($data, $pattern) ? null : $errorMessage };
        $nlike := function($data, $pattern, $errorMessage) { $match($data, $pattern) ? $errorMessage : null };
        $startsWith := function($data, $prefix, $errorMessage) { $substring($data, 0, $length($prefix)) = $prefix ? null : $errorMessage };
        $endsWith := function($data, $suffix, $errorMessage) { $substring($data, $length($data) - $length($suffix)) = $suffix ? null : $errorMessage };
        $strContains := function($data, $substring, $errorMessage) { $contains($data, $substring) ? null : $errorMessage };
        $nStrContains := function($data, $substring, $errorMessage) { $contains($data, $substring) ? $errorMessage : null };
        $isNotNull := function($data, $errorMessage) { $data != null ? null : $errorMessage };
        $isNull := function($data, $errorMessage) { $data = null ? null : $errorMessage };
        $isNotEmpty := function($data, $errorMessage) { $data != null and $data != '' ? null : $errorMessage };
        $isEmpty := function($data, $errorMessage) { $data = null or $data = '' ? null : $errorMessage };

        $isBoolean := function($data, $errorMessage) { $data = true or $data = false ? null : $errorMessage };
        $isNumber := function($data, $errorMessage) { $type($data) = "number" ? null : $errorMessage };
        $isDateFormat := function($data, $errorMessage) {
            $match($data) ? null : $errorMessage
        };

        $formatErrorMessageObject := function($errorObject) {(
            $errorCode := $errorObject.code;
            $errorMessageObject := $lookup($errorMap, $errorCode);

            $message := $lookup($errorMessageObject, "en");

            $formattedMessage := $reduce($errorObject.args, function($acc, $arg, $index) {
                $replace($acc, "{{" & ($index + 1) & "}}", $string($arg))
            }, $message);

            $pathTmp := $reduce($errorObject.path, function($acc, $v, $i) {
                $isNumber($v, "") = null ?
                    ($i = 0 ? "[" & $v & "]" : $acc & "[" & $v & "]") : ($i = 0 ? $v : $acc & "." & $v)
            }, "");

            {
                "code": $errorCode,
                "message": $formattedMessage ? $formattedMessage : $message,
                "path": $pathTmp ? $pathTmp : "unknown"
            }
        )};

        $formatErrorMessageString := function($errorCode) {(
            $list := $split($errorCode, "&");
            $errorMessage := $lookup($errorMap, $list[0]);

            $message := $lookup($errorMessage, "en");

            {
                "code": $list[0],
                "message": $message ? $message : $list[0],
                "place": 1
            }
        )};

        $formatErrorMessage := function($errorCode) {
            $type($errorCode) = "object" ? $formatErrorMessageObject($errorCode) : $formatErrorMessageString($errorCode)
        };

        $customAppend := function($data) {(
            $data = $type($data) = "array" ? $data : $type($data) = "object" ? [$data] : [];

            $response := $reduce($data, $append)
        )};


        /* --- */
        /* --- */
        /* --- */
        /* --- */
        /*Invoice ---*/
        /* --- */
        /* --- */
        /* --- */
        /* --- */
        $isInvoiceTotalAmountEqual := function($invoice, $index) {(
            $itemTotalAmount := $reduce($invoice.items, function($acc, $v) {
                $acc + ($v.invoice_item_total_amount ? $v.invoice_item_total_amount : 0)
            }, 0) ~> $round(2);
            $invoiceTotalAmount := $invoice.invoice_total_amount ? $invoice.invoice_total_amount ~> $round(2) : 0;

            $itemTotalAmount = $invoiceTotalAmount ? null : {"code": "ERROR_0001", "path": ["invoice", $index, "invoice_total_amount"], "args": [$invoiceTotalAmount, $itemTotalAmount]}
        )};
        $invoiceErrorsFirst := $isInvoiceExist and $type(invoice) = "array" ?
            $filter([
                $map(invoice, function($v, $i) {
                    [
                        $max($v.invoice_currency, 3, {"code": "INVALID_0040", "path": ["invoice", $i, "invoice_currency"], "args": []}),
                        $map($v.items, function($vv, $ii) {
                            [
                                /* Country of Origin Validations*/
                                $max($vv.invoice_item_country_of_origin, 2, {"code": "INVALID_0041", "path": ["invoice", $i, "items", $ii, "invoice_item_country_of_origin"], "args": [$ii]}),

                                /* Commodity Code Validations*/
                                $isExist($vv.invoice_item_commodity_code, {"code": "MISSING_0007", "path": ["invoice", $i, "items", $ii, "invoice_item_commodity_code"], "args": [$ii]})

                            ]
                        }) ~> $customAppend()
                    ]
                }) ~> $customAppend() 
            ], function($v) { $v != null })
        : [];
        $invoiceWarningsFirst := $isInvoiceExist and $type(invoice) = "array" ?
            $filter([
                $map(invoice, function($v, $i) {
                    [
                        $isInvoiceTotalAmountEqual($v, $i),
                        $max($v.invoice_currency, 3, {"code": "INVALID_0040", "path": ["invoice", $i, "invoice_currency"], "args": []}),
                        $map($v.items, function($vv, $ii) {
                            [
                            ]
                        }) ~> $customAppend()
                    ]
                }) ~> $customAppend() 
            ], function($v) { $v != null })
        : [];
        $invoiceErrors := $count($invoiceErrorsFirst) ? $map($invoiceErrorsFirst, function($error) {
            $formatErrorMessage($error)
        }) : [];
        $invoiceWarnings := $count($invoiceWarningsFirst) ? $map($invoiceWarningsFirst, function($warning) {
            $formatErrorMessage($warning)
        }) : [];

        /* --- */
        /* --- */
        /* --- */
        /* --- */
        /*tr_export_declaration ---*/
        /* --- */
        /* --- */
        /* --- */
        /* --- */
        $isEqualTotalValueDeclarationInvoice := function($declaration) {(
            $invoiceTotalValue := $isInvoiceExist and $type($.invoice) = "object" ? $.invoice.invoice_total_amount : $isInvoiceExist and $type($.invoice) = "array" ? $.invoice.invoice_total_amount ~> $sum() : 0;
            $declarationTotalValue := $isDeclarationExist and $declaration.total_value ? $atoi($declaration.total_value) : 0;

            $invoiceTotalValue = 0 or $declarationTotalValue = 0 or $round($invoiceTotalValue, 2) = $round($declarationTotalValue, 2) ? null : {"code": "ERROR_0005", "path": ["tr_export_declaration", "total_value"], "args": [$declarationTotalValue, $invoiceTotalValue] }
        )};
        $isEqualDeclarationTotalGrossWeight := function($declaration) {(
            $grossWeight := $declaration.total_weight ? $declaration.total_weight : 0;
            $itemTotalGrossWeight := $reduce($declaration.items, function($acc, $v) {
                $acc + ($v.gross_weight ? $v.gross_weight : 0)
            }, 0) ~> $round(2);

            ($round($grossWeight, 2) = $itemTotalGrossWeight or $grossWeight = 0) ? null : {"code": "ERROR_0004", "path": ["tr_export_declaration", "total_weight"], "args": [$grossWeight, $itemTotalGrossWeight] }
        )};
        $isEqualDeclarationTotalItemLine := function($declaration) {(
            $totalLineItem := $declaration.total_line_item ~> $type() = "string" ? $atoi($declaration.total_line_item) : $declaration.total_line_item;
            $itemCount := $count($declaration.items) ?? 0;

            $totalLineItem = $itemCount ? null : {"code": "ERROR_0003", "path": ["tr_export_declaration", "total_line_item"], "args": [$totalLineItem, $itemCount] }
        )};
        $isDeclarationTotalValueEqual := function($declaration) {(
            $itemTotalValue := $reduce($declaration.items, function($acc, $v) {
                $acc + ($v.item_value ? $v.item_value : 0)
            }, 0);
            $declarationTotalValue := $declaration.total_value ? $atoi($declaration.total_value) : 0;

            $round($itemTotalValue, 2) = $declarationTotalValue ? null : { "code":"ERROR_0002", "path": ["tr_export_declaration", "total_value"], "args": [$declarationTotalValue, $itemTotalValue] }
        )};
        $declarationErrorsFirst := $isDeclarationExist ? $filter([
            $map($.tr_export_declaration.items, function($v, $i) {
                [
                    /* Commodity Code */
                    $isExist($v.commodity_code, {"code": "INVALID_0039", "path": ["tr_export_declaration", "items", $i, "commodity_code"], "args": [$i]}),

                    /* Country of Origin */
                    $isExist($v.origin, {"code": "INVALID_0042", "path": ["tr_export_declaration", "items", $i, "origin"], "args": [$i]}),
                    $max($v.origin, 2, {"code": "INVALID_0042", "path": ["tr_export_declaration", "items", $i, "origin"], "args": [$i]})
                ]
            }) ~> $customAppend()
        ], function($v) { $v != null }) : [];
        $declarationWarningsFirst := $isDeclarationExist ? $filter([
            $isEqualDeclarationTotalGrossWeight(tr_export_declaration),
            $isDeclarationTotalValueEqual(tr_export_declaration),
            $isEqualDeclarationTotalItemLine(tr_export_declaration),
            $isEqualTotalValueDeclarationInvoice(tr_export_declaration),
            $map($.tr_export_declaration.items, function($v, $i) {
                [
                ]
            }) ~> $customAppend()
        ], function($v) { $v != null }) : [];
        $declarationErrors := $count($declarationErrorsFirst) ? $map($declarationErrorsFirst, function($error) {
            $formatErrorMessage($error)
        }) : [];
        $declarationWarnings := $count($declarationWarningsFirst) ? $map($declarationWarningsFirst, function($error) {
            $formatErrorMessage($error)
        }) : [];


        /* --- */
        /* --- */
        /* --- */
        /* --- */
        /*Atr ---*/
        /* --- */
        /* --- */
        /* --- */
        /* --- */
        $atrErrors := $isAtrExist ? $filter([
        ], function($v) { $v 
        != null }) : [];


        {
            "additional_data": {
                "errors": $count($additionalErrors) = 1 ? [$additionalErrors] : $additionalErrors,
                "warnings": $count($additionalWarnings) = 1 ? [$additionalWarnings] : $additionalWarnings
            },
            "invoice": {
                "errors": $count($invoiceErrors) = 1 ? [$invoiceErrors] : $invoiceErrors,
                "warnings": $count($invoiceWarnings) = 1 ? [$invoiceWarnings] : $invoiceWarnings
            },
            "atr": {
                "errors": [],
                "warnings": []
            },
            "tr_export_declaration": {
                "errors": $count($declarationErrors) = 1 ? [$declarationErrors] : $declarationErrors,
                "warnings": $count($declarationWarnings) = 1 ? [$declarationWarnings] : $declarationWarnings
            }
        }
    )